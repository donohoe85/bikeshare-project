import time
import pandas as pd
import numpy as np
CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }
city_names = ['chicago', 'new york city', 'washington']
month_names = ['all', 'january', 'february', 'march', 'april', 'may', 'june']
day_names = ['all', 'sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat']          
def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.
    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Welcome! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    while True:
        city = input('In which city are you interested? chicago, new york city or washington?').lower() 
        if city not in CITY_DATA: 
            print("Invalid city", "please try again")
            continue
        else:
            break 
    # TO DO: get user input for month (all, january, february, ... , june)
    month = input('Which month would you like to analyze? any month january thru june or all?').lower()
    while (month not in month_names):
        print("Invalid month", "please try again")
    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    day = input('Which day would you like to analyze? any day of the week or all? (In 3 letter abbreviations)').lower()
    while (day not in day_names):
        print("Invalid day", "please try again")
    print('-'*40)
    return city, month, day
def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.
    
    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    # Load data 
    df = pd.read_csv(CITY_DATA[city])
    # convert to date time
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.weekday
    
    if month.lower() != 'all':
        # use the index of the months list to get the corresponding int
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) +1
        # filter by month to create the new dataframe
        df = df[df['month'] == month]
    # filter by day of week if applicable
    if day.lower() != 'all':
        # filter by day of week to create the new dataframe
        df = df[df['day_of_week'] == day.title()]
    
    return df
def time_stats(df):
    """Displays statistics on the most frequent times of travel."""
    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()
    # TO DO: display the most common month
    common_month = df['month'].mode()
    print('The most common month is',common_month)
    # TO DO: display the most common day of week
    common_day = df['day_of_week'].mode()
    print('The most common day is',common_day)
    # TO DO: display the most common start hour
    df['hour'] = df['Start Time'].dt.hour
    common_start_time = df['hour'].mode()
    print('The most common start hour is',common_start_time)
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
    
def station_stats(df):
    """Displays statistics on the most popular stations and trip."""
    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()
    # TO DO: display most commonly used start station
    most_common_start_station = df['Start Station'].mode()
    print('Most used start station', most_common_start_station)
    # TO DO: display most commonly used end station
    most_common_end_station = df['End Station'].mode()
    print('Most used end station', most_common_end_station)
    # TO DO: display most frequent combination of start station and end station trip
    df['combo'] = df['Start Station'] + 'to' + df['End Station']
    most_common_comb_station = df['combo'].mode()
    print('Most common trip',most_common_comb_station)
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""
    print('\nCalculating Trip Duration...\n')
    start_time = time.time()
    # TO DO: display total travel time
    total_travel_Time = ("total travel time:" + str(df["Trip Duration"].sum()))
    print('total travel time', total_travel_Time)
    # TO DO: display mean travel time
    avg_travel_time = np.average(df["Trip Duration"])
    print('Average travel time', avg_travel_time)
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
    
def user_stats(df):
    """Displays statistics on bikeshare users."""
    print('\nCalculating User Stats...\n')
    start_time = time.time()
    # TO DO: Display counts of user types
    user_type_count = df["User Type"].value_counts()
    print('number of users',user_type_count)
    
    # TO DO: Display counts of gender
    gender_count = df["Gender"].value_counts()
    print('gender count',gender_count)
    # TO DO: Display earliest, most recent, and most common year of birth
    min_birth_year = df["Birth Year"].min()
    print('The earliest birth year is,', min_birth_year)
    max_birth_year = df["Birth Year"].max()
    print('The latest birth year is,',max_birth_year)
    most_common_year = df["Birth Year"].mode()
    print('The most common birth year is',most_common_year)
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
          
def display_data(df):
    """Displays 5 lines of raw data if requested by user."""
    start = 0
    raw_data = input("Would you like to see raw data? (5 rows) yes or no:").lower()
    while true:
          if raw_data !='no':
            print(df.iloc[start:start +5])
            start += 5
            end_display = input("Yes or no to continue:").lower()
   
def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)
        
        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)
        display_data(df)
        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break
if __name__ == "__main__":
    main()
